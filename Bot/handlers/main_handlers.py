import io
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, \
    FSInputFile, ContentType

from Bot.keyboards.main_keyboards import *
from Bot.states.user_info_states import *
from Bot.functions.main_functions import *
from environs import Env

env = Env()
env.read_env()

router = Router()


def has_cyrillic(text):
    return any('\u0400' <= char <= '\u04FF' for char in text)


############################ –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ############################
async def main_menu(message: Message, state: FSMContext):
    await state.set_state(
        Cabinet.startCreateCabinet)
    await message.answer(
        text="–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∫ —Å–≤–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç",
        reply_markup=main_keyboard())


@router.message(Cabinet.startCreateCabinet, F.text == "–î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
async def every_day_report(message: Message, state: FSMContext):
    user_data = await state.get_data()
    send_log(tg_id=message.from_user.id,
             tg_username=message.from_user.username,
             phone=str(user_data["phone_number"]),
             is_client=True if "client_id" in user_data else False,
             tg_command="every_day_report",
             input_data=message.text)

    user_data = await state.get_data()
    cabinets = await find_cabinets(user_data['client_id'])
    await state.set_state(MainMenu.selectCabinet)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=all_cabinets(cabinets))


@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    user_data = await state.get_data()
    if "client_id" in user_data:
        await main_menu(message, state)
    else:
        await cmd_start(message, state)


@router.message(MainMenu.selectCabinet)
async def select_cabinet(message: Message, state: FSMContext):
    if not await have_cabinet(message.text):
        await message.answer(text="–¢–∞–∫–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, "
                                  "–ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ", reply_markup=ReplyKeyboardRemove())
        await every_day_report(message, state)
    else:
        user_data = await state.get_data()
        send_log(tg_id=message.from_user.id,
                 tg_username=message.from_user.username,
                 phone=str(user_data["phone_number"]),
                 is_client=True if user_data["client_id"] else False,
                 tg_command="select_cabinet",
                 input_data=message.text)
        await state.update_data(cabinet_name=message.text)
        await state.set_state(MainMenu.selectDateExcel)
        cabinet_name = message.text
        await message.answer(text="–°–º–æ—Ç—Ä–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞...")
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ",
                             reply_markup=select_date(gen_date_excel(cabinet_name)))
        await state.set_state(MainMenu.selectedDateExcel)


@router.message(MainMenu.selectedDateExcel)
async def selected_date_excel(message: Message, state: FSMContext):
    user_data = await state.get_data()
    all_dates_invalid = gen_date_excel(user_data["cabinet_name"])
    all_dates = [i[16:] for i in all_dates_invalid]
    if len(message.text) == 26:
        if message.text[16:] not in all_dates:
            await message.answer(text="–¢–∞–∫–∞—è –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ")
            return
    else:
        await message.answer(text="–¢–∞–∫–∞—è –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ")
        return
    await state.update_data(dateExcel=message.text)

    send_log(tg_id=message.from_user.id,
             tg_username=message.from_user.username,
             phone=str(user_data["phone_number"]),
             is_client=True if user_data["client_id"] else False,
             tg_command="select_data_excel",
             input_data=message.text)

    await message.answer(text=f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - {message.text}", reply_markup=back_to_main_keyboard())
    await state.set_state(MainMenu.waitExcel)
    await message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ –∞—Ä—Ö–∏–≤–∞ —Å –æ–¥–Ω–∏–º Excel —Ñ–∞–π–ª–æ–º\n –ü–æ –æ–¥–Ω–æ–º—É –∞—Ä—Ö–∏–≤—É –∑–∞ —Ä–∞–∑")


@router.message(MainMenu.waitExcel, F.content_type == ContentType.DOCUMENT)
async def wait_excel(message: Message, state: FSMContext):
    # if len(message.attachments) > 1:
    #     await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ –∞—Ä—Ö–∏–≤–∞ —Å –æ–¥–Ω–∏–º Excel —Ñ–∞–π–ª–æ–º\n"
    #                               "–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ")
    #     return
    user_data = await state.get_data()
    await state.update_data(file_id=message.document.file_id)
    file_id = message.document.file_id
    file_name = message.document.file_name
    if file_name[-5:] == ".xlsx":
        await message.answer(
            text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ .zip –∞—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–∫–∞—á–∞–ª–∏ —Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, –Ω–µ –∏–∑–º–µ–Ω—è—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
    elif file_name[-4:] == ".xls":
        await message.answer(
            text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ .zip –∞—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–∫–∞—á–∞–ª–∏ —Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, –Ω–µ –∏–∑–º–µ–Ω—è—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
    elif file_name[-4:] == ".zip":
        try:
            os.mkdir(f'reports/{user_data["client_id"]}')
        except FileExistsError:
            await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä—Ö–∏–≤ —Å –æ—Ç—á–µ—Ç–æ–º")
            return
        await message.bot.download(file_id, f'reports/{user_data["client_id"]}/{user_data["client_id"]}.zip')
        if await read_excel_wb_zip(
                "reports/" + str(user_data["client_id"]) + "/" + str(user_data["client_id"]) + ".zip",
                user_data["client_id"],
                file_name,
                user_data['cabinet_name'],
                date_to=user_data['dateExcel']):
            await message.answer(text="–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            await main_menu(message, state)
        else:
            await message.answer(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª, "
                                      f"–≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –¥–µ–ª–∞–µ—Ç–µ –≤–µ—Ä–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º "
                                      f"@{env('MANAGER_CHAT_ID')}")
    else:
        await message.answer(text="–î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–æ —Å –¥—Ä—É–≥–∏–º —Ñ–∞–π–ª–æ–º, "
                                  f"–≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –¥–µ–ª–∞–µ—Ç–µ –≤–µ—Ä–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º "
                                  f"@{env('MANAGER_CHAT_ID')}")


############################### –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ ################################
@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    user_data = await state.get_data()
    send_log(tg_id=message.from_user.id,
             tg_username=message.from_user.username,
             phone=user_data["phone_number"] if "phone_number" in user_data else "",
             is_client=True if "client_id" in user_data else False,
             tg_command="start",
             input_data="/start")

    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç!üëã\n\n'
                              f'–ù–∞ —Å–≤—è–∑–∏ <b>–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Metrix</b> - —ç—Ç–æ —É–¥–æ–±–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ '
                              f'Wildberries, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Å–∫–ª–∞–¥—Å–∫–æ–π —É—á–µ—Ç, —Ç–æ–≤–∞—Ä–Ω—É—é, —Ä–µ–∫–ª–∞–º–Ω—É—é –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é '
                              f'–∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µüìà\n\n–° –Ω–∞—à–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å '
                              f'–∏ –¥—Ä—É–≥–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏üöÄ', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Authorize.startAuthorize)
    user_data = await state.get_data()
    if "phone_number" not in user_data:
        phone_check, client_id = await check_client_id(message.from_user.id)
        if phone_check != "":
            await state.update_data(client_id=client_id)
            await state.update_data(phone_number=phone_check)
            await main_menu(message, state)
        else:
            await message.answer(text=f'–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä" –≤ –º–µ–Ω—é –±–æ—Ç–∞ , '
                                      f'—á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º —Å –Ω–∞–º–∏.\n\n'
                                      f'–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Ä—è–¥–æ–º —Å –∏–∫–æ–Ω–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ '
                                      f'—Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π.', reply_markup=get_reg_keyboard())
    else:
        await main_menu(message, state)


@router.message(F.contact)
async def get_phone(message: Message, state: FSMContext):
    await message.answer(text=f'–°–ø–∞—Å–∏–±–æ, {message.contact.first_name}! –í–∞—à –Ω–æ–º–µ—Ä - {message.contact.phone_number}',
                         reply_markup=ReplyKeyboardRemove())
    await state.update_data(phone_number=message.contact.phone_number)

    client_id_check, client_tg_id = await check_client_number(message.contact.phone_number)
    if client_id_check == "":

        send_log(tg_id=message.from_user.id,
                 tg_username=message.from_user.username,
                 phone=message.contact.phone_number,
                 is_client=None,
                 tg_command="get_phone",
                 input_data=str(message.contact.phone_number))

        await state.set_state(Cabinet.startCreateCabinet)
        await message.answer(text=f'–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç', reply_markup=add_cabinet_keyboard())
    else:
        if int(client_tg_id) != message.from_user.id:
            await refresh_tg_id(client_id_check, message.from_user.id)
        await state.update_data(client_id=client_id_check)
        await main_menu(message, state)


@router.message(Cabinet.startCreateCabinet, F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç")
async def selectMP(message: Message, state: FSMContext):
    user_data = await state.get_data()
    send_log(tg_id=message.from_user.id,
             tg_username=message.from_user.username,
             phone=str(user_data["phone_number"]),
             is_client=True if user_data["client_id"] else False,
             tg_command="selectMP",
             input_data="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç")

    await state.set_state(Cabinet.selectMP)
    await message.answer(text="–ö–∞–±–∏–Ω–µ—Ç –∫–∞–∫–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=select_MP())


@router.message(Cabinet.selectMP)
async def enter_name(message: Message, state: FSMContext):
    if message.text == "Wildberries":
        await state.update_data(mp="Wildberries")
    elif message.text == "Ozon":
        await state.update_data(mp="Ozon")
    else:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        await state.set_state(Cabinet.startCreateCabinet)
        await selectMP(message, state)
        return
    await state.set_state(Cabinet.inputName)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞", reply_markup=ReplyKeyboardRemove())


@router.message(Cabinet.inputName)
async def check_cabinet_name(message: Message, state: FSMContext):
    user_data = await state.get_data()
    client_id = ""
    if "client_id" in user_data:
        client_id = user_data["client_id"]
    if client_id != "":
        if await check_unic_cabinet(message.text, client_id):
            await state.update_data(cabinet_name=message.text)

            user_data = await state.get_data()
            send_log(tg_id=message.from_user.id,
                     tg_username=message.from_user.username,
                     phone=str(user_data["phone_number"]),
                     is_client=True,
                     tg_command="check_cabinet_name",
                     input_data=user_data["cabinet_name"])

            if user_data["mp"] == "Wildberries":
                await state.set_state(Cabinet.wbTokenStat)
                await wb_tokens_stat(message, state)
            elif user_data["mp"] == "Ozon":
                await state.set_state(Cabinet.ozonTokens)
                await ozon_tokens(message, state)
        else:
            await message.answer(text="–£ –≤–∞—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∫–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ")
    else:
        await state.update_data(cabinet_name=message.text)
        user_data = await state.get_data()
        send_log(tg_id=message.from_user.id,
                 tg_username=message.from_user.username,
                 phone=str(user_data["phone_number"]),
                 is_client=False,
                 tg_command="check_cabinet_name",
                 input_data=user_data["cabinet_name"])
        if user_data["mp"] == "Wildberries":
            await state.set_state(Cabinet.wbTokenStat)
            await wb_tokens_stat(message, state)
        elif user_data["mp"] == "Ozon":
            await state.set_state(Cabinet.ozonTokens)
            await ozon_tokens(message, state)


############################ –í–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ ################################
@router.message(Cabinet.wbTokenStat)
async def wb_token_stat_check(message: Message, state: FSMContext):
    await message.answer(text="–ü—Ä–æ–≤–µ—Ä—è–µ–º...")
    if not has_cyrillic(message.text):
        if await check_token_request(message.text, "Wildberries"):
            await state.update_data(token_stat=message.text)

            user_data = await state.get_data()
            send_log(tg_id=message.from_user.id,
                     tg_username=message.from_user.username,
                     phone=str(user_data["phone_number"]),
                     is_client=True if "client_id" in user_data else False,
                     tg_command="wb_token_stat_check",
                     input_data=user_data["token_stat"])

            await wb_tokens_promo(message, state)
        else:
            await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                                 reply_markup=help_wb_statistic_token_keyboard())
            await wb_tokens_stat(message, state, repeating=True)
    else:
        await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                             reply_markup=help_wb_statistic_token_keyboard())
        await wb_tokens_stat(message, state, repeating=True)


async def wb_tokens_stat(message: Message, state: FSMContext, repeating=False):
    if not repeating:
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Wildberries",
                             reply_markup=help_wb_statistic_token_keyboard())
    await state.set_state(Cabinet.wbTokenStat)


@router.message(Cabinet.wbTokenPromo)
async def wb_token_promo_check(message: Message, state: FSMContext):
    await message.answer(text="–ü—Ä–æ–≤–µ—Ä—è–µ–º...")
    if not has_cyrillic(message.text):
        if await check_token_request(message.text, "Wildberries", promotion=True):
            await state.update_data(token_promo=message.text)

            user_data = await state.get_data()
            send_log(tg_id=message.from_user.id,
                     tg_username=message.from_user.username,
                     phone=str(user_data["phone_number"]),
                     is_client=True if "client_id" in user_data else False,
                     tg_command="wb_token_promo_check",
                     input_data=user_data["token_promo"])

            await success_tokens(message, state)
        else:
            await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                                 reply_markup=help_wb_promo_token_keyboard())
            await wb_tokens_promo(message, state, repeating=True)
    else:
        await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                             reply_markup=help_wb_promo_token_keyboard())
        await wb_tokens_promo(message, state, repeating=True)


async def wb_tokens_promo(message: Message, state: FSMContext, repeating=False):
    if not repeating:
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è Wildberries",
                             reply_markup=help_wb_promo_token_keyboard())
    await state.set_state(Cabinet.wbTokenPromo)


@router.message(Cabinet.ozonTokens)
async def ozon_tokens_input(message: Message, state: FSMContext):
    if not has_cyrillic(message.text):
        await state.set_state(Cabinet.ozonId)
        await state.update_data(ozon_seller_token=message.text)
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ Ozon", reply_markup=help_ozon_id_keyboard())
    else:
        await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Ozon",
                             reply_markup=help_ozon_token_keyboard())
        await ozon_tokens(message, state, repeating=True)


@router.message(Cabinet.ozonId)
async def ozon_id_check(message: Message, state: FSMContext):
    if not has_cyrillic(message.text):
        user_data = await state.get_data()
        if await check_token_request(user_data["ozon_seller_token"], "Ozon", ozon_id=message.text):
            await state.update_data(ozon_id=message.text)

            user_data = await state.get_data()
            send_log(tg_id=message.from_user.id,
                     tg_username=message.from_user.username,
                     phone=str(user_data["phone_number"]),
                     is_client=True if "client_id" in user_data else False,
                     tg_command="ozon_token_and_id_check",
                     input_data=message.text)

            await success_tokens(message, state)
        else:
            await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ —Ç–æ–∫–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Ozon",
                                 reply_markup=help_ozon_token_keyboard())
            await ozon_tokens(message, state, repeating=True)
    else:
        await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ —Ç–æ–∫–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Ozon",
                             reply_markup=help_ozon_token_keyboard())
        await ozon_tokens(message, state, repeating=True)


async def ozon_tokens(message: Message, state: FSMContext, repeating=False):
    if not repeating:
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Ozon", reply_markup=help_ozon_token_keyboard())
    await state.set_state(Cabinet.ozonTokens)


############################ –ö–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –ø–æ–º–æ—â–∏ ################################
@router.callback_query(F.data == "help_ozon_report")
async def help_ozon_report(callback: CallbackQuery):
    await callback.message.answer(text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç—á–µ—Ç–∞ Ozon")
    await callback.answer()


@router.callback_query(F.data == "help_wb_report")
async def help_wb_report(callback: CallbackQuery):
    await callback.message.answer(text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç—á–µ—Ç–∞ Wildberries")
    await callback.answer()


@router.callback_query(F.data == "help_ozon_id")
async def help_ozon_id(callback: CallbackQuery):
    await callback.message.answer(text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ ID –∫–ª–∏–µ–Ω—Ç–∞ Ozon")
    await callback.answer()


@router.callback_query(F.data == "help_wb_promo_token")
async def help_wb_promo_token(callback: CallbackQuery):
    await callback.message.answer(text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è Wildberries")
    await callback.answer()


@router.callback_query(F.data == "help_wb_statistic_token")
async def help_wb_statistic_token(callback: CallbackQuery):
    await callback.message.answer(text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Wildberries")
    await callback.answer()


@router.callback_query(F.data == "help_ozon_token")
async def help_ozon_token(callback: CallbackQuery):
    await callback.message.answer(text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ Ozon")
    await callback.answer()


############################ –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ################################
async def success_tokens(message: Message, state: FSMContext):
    await message.answer(text="–£—Å–ø–µ—à–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    user_data = await state.get_data()
    if "client_id" in user_data:
        if await create_cabinet_client(user_data):
            user_data = await state.get_data()
            phone = user_data["phone_number"]
            client_id = user_data["client_id"]
            await state.clear()
            await state.set_state(MainMenu.mainMenu)
            await state.update_data(phone_number=phone, client_id=client_id)
            await main_menu(message, state)
        else:
            await message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–∏ÃÜ—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è",
                                 reply_markup=ReplyKeyboardRemove())
            await state.clear()
            await cmd_start(message, state)
    else:
        await state.set_state(Cabinet.gmail)
        gmail = await check_gmail(str(message.from_user.id))
        if gmail == "":
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É gmail", reply_markup=ReplyKeyboardRemove())
            await state.set_state(Cabinet.inputGmail)
        else:
            await message.answer(text=f"–í–∞—à –ø–æ—á—Ç–æ–≤—ã–∏ÃÜ —è—â–∏–∫ - {gmail}", reply_markup=ReplyKeyboardRemove())
        await state.update_data(gmail=gmail)


@router.message(Cabinet.inputGmail)
async def input_gmail(message: Message, state: FSMContext):
    if message.text.find("@gmail.com") != -1:
        await state.update_data(gmail=message.text)

        user_data = await state.get_data()
        send_log(tg_id=message.from_user.id,
                 tg_username=message.from_user.username,
                 phone=str(user_data["phone_number"]),
                 is_client=True if "client_id" in user_data else False,
                 tg_command="input_gmail",
                 input_data=message.text)

        await state.set_state(Cabinet.final)
        await final(message, state)
    else:
        await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞, –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ Google –ø–æ—á—Ç–∞\n–ü—Ä–∏–º–µ—Ä: xxxxxx@gmail.com",
                             reply_markup=ReplyKeyboardRemove())


async def final(message: Message, state: FSMContext):
    await message.answer(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä",
                         reply_markup=ReplyKeyboardRemove())
    user_data = await state.get_data()
    if user_data["mp"] == "Wildberries":
        str = f"–¢–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {user_data['token_stat']}\n–¢–æ–∫–µ–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è: {user_data['token_promo']}\n"
    else:
        str = f"–¢–æ–∫–µ–Ω Ozon seller: {user_data['ozon_seller_token']}\nOzon ID: {user_data['ozon_id']}\n"
    await message.bot.send_message(chat_id=env('MANAGER_CHAT_ID'),
                                   text=f"–ù–æ–≤—ã–∏ÃÜ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                                        f"ID –¢–µ–ª–µ–≥—Ä–∞–º: {message.from_user.id}\n"
                                        f"–ò–º—è: {message.from_user.first_name}\n"
                                        f"Username –¢–µ–ª–µ–≥—Ä–∞–º: @{message.from_user.username}\n"
                                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}\n"
                                        f"–ü–æ—á—Ç–∞: {user_data['gmail']}\n"
                                        f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–∏ÃÜ—Å: {user_data['mp']}\n"
                                        f"–ö–∞–±–∏–Ω–µ—Ç: {user_data['cabinet_name']}\n" + str +
                                        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}")
    await write_to_db(user_data=user_data,
                      tg_id=message.from_user.id,
                      name=message.from_user.first_name,
                      username=message.from_user.username,
                      phone=user_data["phone_number"],
                      mp=user_data["mp"],
                      cabinet_name=user_data["cabinet_name"],
                      gmail=user_data["gmail"],
                      date=datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S'))
    await state.clear()
